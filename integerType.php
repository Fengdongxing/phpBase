<?php
//
$int = 1234;
$int = -123;
$int = 0123;  //八进制
$int = 0x1A; // 十六进制
//  整型数值有最大的使用范围。整型数的字长和平台及 PHP 的版本有关，对于 32 位的操作系统而言，
//最大值整数为 20 多亿，具体为 2 147 483 647。PHP 不支持无符号整数，所以不能像其他语言那样将整
//数都变成正数，也就不能将最大值翻一番。整型的最小值为2 147 483 648。如果给定的一个数超出了
//Integer 这个范围，将会被解释为 float。同样，如果执行的运算结果超出了 Integer 这个范围，也会返回
//Float。整型数值有最大的使用范围。整型数的字长和平台及 PHP 的版本有关，对于 32 位的操作系统而言，
//最大值整数为 20 多亿，具体为 2 147 483 647。PHP 不支持无符号整数，所以不能像其他语言那样将整
//数都变成正数，也就不能将最大值翻一番。整型的最小值为2 147 483 648。如果给定的一个数超出了
//Integer 这个范围，将会被解释为 float。同样，如果执行的运算结果超出了 Integer 这个范围，也会返回
//Float。
$large_number = 2147483647;
var_dump($large_number);

//
echo PHP_INT_SIZE;

// float浮点型
//浮点数是包含小数部分的数，double相同,

$float = 1.234;

/*浮点 数 只是一种近似的 数值，如果使用浮点数表示 8 ，则 该结果内部的表示其实类 似于
7.999 999 999 9……所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相
等。*/ // 不是很明白 todo
// 如果确实需要更高的精度，应该使用任意精度数学函数或者 gmp()函数。不是很明白; todo

